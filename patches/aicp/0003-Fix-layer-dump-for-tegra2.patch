From 1f317d3fa17c914c2b35d3765579370f7277a769 Mon Sep 17 00:00:00 2001
From: Nikhil <nikhil@menghani.com>
Date: Fri, 26 Sep 2014 12:01:57 +0530
Subject: [PATCH] Fix layer dump for tegra2

---
 services/surfaceflinger/DisplayHardware/Android.mk |  5 ++
 .../surfaceflinger/DisplayHardware/HWComposer.cpp  | 56 ++++++++++++++++++++++
 2 files changed, 61 insertions(+)

diff --git a/services/surfaceflinger/DisplayHardware/Android.mk b/services/surfaceflinger/DisplayHardware/Android.mk
index 83b106b..b48b5a0 100644
--- a/services/surfaceflinger/DisplayHardware/Android.mk
+++ b/services/surfaceflinger/DisplayHardware/Android.mk
@@ -57,6 +57,11 @@ ifeq ($(BOARD_EGL_NEEDS_FNW),true)
     LOCAL_CFLAGS += -DEGL_NEEDS_FNW
 endif
 
+#this defines CFLAGS for tegra2 devices for fixing layer dump
+ifeq ($(BOARD_FNW_NEEDS_LAYER_DUMP),true)
+    LOCAL_CFLAGS += -DFNW_NEEDS_LAYER_DUMP
+endif
+
 ifneq ($(NUM_FRAMEBUFFER_SURFACE_BUFFERS),)
   LOCAL_CFLAGS += -DNUM_FRAMEBUFFER_SURFACE_BUFFERS=$(NUM_FRAMEBUFFER_SURFACE_BUFFERS)
 endif
diff --git a/services/surfaceflinger/DisplayHardware/HWComposer.cpp b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
index bc67dfd..cdf3b24 100644
--- a/services/surfaceflinger/DisplayHardware/HWComposer.cpp
+++ b/services/surfaceflinger/DisplayHardware/HWComposer.cpp
@@ -1393,6 +1393,62 @@ void HWComposer::dump(String8& result) const {
                     i, disp.width, disp.height, disp.xdpi, disp.ydpi, disp.refresh);
 
             if (disp.list) {
+				
+				#ifdef FNW_NEEDS_LAYER_DUMP
+					if ( hwcApiVersion(mHwc) == 0)
+					{
+						hwc_layer_list_t *list = (hwc_layer_list_t*) disp.list;
+						result.appendFormat(
+								"  numHwLayers=%u, flags=%08x\n",
+								list->numHwLayers, list->flags);
+
+						result.append(
+								"    type    |  handle  |   hints  |   flags  | tr | blend |  format  |          source crop            |           frame           name \n"
+								"------------+----------+----------+----------+----+-------+----------+---------------------------------+--------------------------------\n");
+						//      " __________ | ________ | ________ | ________ | __ | _____ | ________ | [_____._,_____._,_____._,_____._] | [_____,_____,_____,_____]
+					for (size_t i=0 ; i<list->numHwLayers ; i++) {
+							const hwc_layer_t&l = list->hwLayers[i];
+							int32_t format = -1;
+							String8 name("unknown");
+
+							if (i < visibleLayersSortedByZ.size()) {
+								const sp<Layer>& layer(visibleLayersSortedByZ[i]);
+								const sp<GraphicBuffer>& buffer(
+										layer->getActiveBuffer());
+								if (buffer != NULL) {
+									format = buffer->getPixelFormat();
+								}
+								name = layer->getName();
+							}
+
+							int type = l.compositionType;
+							if (type == HWC_FRAMEBUFFER_TARGET) {
+								name = "HWC_FRAMEBUFFER_TARGET";
+								format = disp.format;
+							}
+
+							static char const* compositionTypeName[] = {
+								"GLES",
+								"HWC",
+								"BACKGROUND",
+								"FB TARGET",
+								"FB_BLIT",
+								"UNKNOWN"};
+							if (type >= NELEM(compositionTypeName))
+								type = NELEM(compositionTypeName) - 1;
+
+							result.appendFormat(
+									" %10s | %08x | %08x | %08x | %02x | %05x | %08x | [%7d,%7d,%7d,%7d] | [%5d,%5d,%5d,%5d] %s\n",
+									compositionTypeName[type],
+									intptr_t(l.handle), l.hints, l.flags, l.transform, l.blending, format,
+									l.sourceCrop.left, l.sourceCrop.top, l.sourceCrop.right, l.sourceCrop.bottom,
+									l.displayFrame.left, l.displayFrame.top, l.displayFrame.right, l.displayFrame.bottom,
+									name.string());
+						}
+						continue;
+					}
+				#endif
+				
                 result.appendFormat(
                         "  numHwLayers=%u, flags=%08x\n",
                         disp.list->numHwLayers, disp.list->flags);
-- 
1.9.1

